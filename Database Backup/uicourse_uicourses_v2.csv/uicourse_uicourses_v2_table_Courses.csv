"Id","Reviews","InitUid","Subject","Code","Suffix","Title","Professor","Description","Knowledge","Resource","Tool","Letter_Ap","Letter_A","Letter_Am","Letter_Bp","Letter_B","Letter_Bm","Curve","Pct_Lecture","Pct_Discussion","Pct_Homework","Pct_Lab","Pct_Quiz","Pct_Midterm","Pct_Project","Pct_Final","Pct_ExtraCredit","Pct_Other","Desc_Lecture","Desc_Discussion","Desc_Homework","Desc_Lab","Desc_Quiz","Desc_Midterm","Desc_Project","Desc_Final","Desc_ExtraCredit","Desc_Other","Diff_Lecture","Diff_Discussion","Diff_Homework","Diff_Lab","Diff_Quiz","Diff_Midterm","Diff_Project","Diff_Final","Honor"
"1","1,2,3,4","Sumerinlan","CS","374",,"Introduction to Algorithms & Models of Computation","Chandra Chekuri,","CS 系经典的必修课程之一。第一个 Midterm 前是运算模型 (Finite Automata 和图灵机等)，两个 Midterm 之间是常用算法 (recursion, greedy, dynamic programming)，之后是 Problem reduction，NP-hard / NP-Complete 的定义与证明，可以想成是前两部分的结合，不过重点一般还是放在第二部分上，也就是算法性质的 Reduction。由于面试中最常考到的就是算法问题，这节课对面试成功率有一定帮助。

上本课之前建议已学完 173 与 225 (225 可以看作一个算法的入门)，即使已经忘记了也没什么关系，重新复习一下就可以。代码都是 Pseudo Code。难度主要取决于个人对数学证明的熟悉度，如果对常用证明方法 (Induction, Contradiction 等) 比较熟悉的话难度会小很多，不过本课证明不多，主要是前期的 Induction，中期的 Greedy Algorithm 与后期的 Reduction，思路也相对直观，因此 MATH 347 不是一定需要。

引用某大腿的话：""本课的算法思想对于 CS 后续课程是非常重要的，虽然后续课程的大多内容并非缺了 374 就不能理解，但是 374 能从一个更加 Systematic 的角度提供理解。至于 Models of Computation，是计算原理方面的内容，因为比起算法更加 Fundamental，应用就相对 Limited 一些。个人对这方面了解也不深，就不多做评论了。""","关于 Models of Computation 的部分，从 String 和 Language 开始，到 DFA，NFA 和 Context-free Grammar，最后再到 Turing Machine。算法部分就系统多了，从 Recursion 开始，到 Dynamic Programming 与 Graph Algorithm，再到 Greedy Algorithm，最后结束于 Problem Reduction。最后一个普遍反映比较难理解。感觉图灵机算是最抽象的知识点了。","- [课程主页](https://courses.engr.illinois.edu/cs374/)
- [Resources](https://courses.engr.illinois.edu/cs374/resources.html)","- LaTeX Editor (like TexStudio) 或文字编辑器和相应的 LaTeX Package
- 清醒的大脑 (其实 UIUC 有很多课即使不很动脑子也可以拿高分。但是这门课最好还是要勤思考，得 A 才有保障)",NULL,NULL,NULL,NULL,NULL,NULL,"有，按排名比例给 Letter Grade，唯一的例外就是 Raw score 93% 以上的人自动获得 A+ (Jeff 教时是 90%)。一般来说一学期上课的人是 400+，其中 A+ 线大概会划在 15-19 名左右，A 线会划在 60-70 名左右。下面的就不是很清楚了。","0","0","28","0","0","42","0","30","0","0","不记出勤。课堂内容稍微有点多，上课内容过的较快，建议回去再认真看看 Slides 或者视频。","形式上很像 173 的 Discussion。不记出勤，但是 TA 会把上课重点过一遍，并带着大家做题，有助于快速理解题目。课后思考题有一些难度。有时候效率有点低，但有时候也蛮有用的。建议去，对练题感很有帮助。","这节课没有编程作业，所有作业均为理论证明，建议用 Latex 写。一至三人小队上交一份作业，可以随时自由换组，平均一人一周写一题，工作量并不大。一共 11 次作业 33 题，可以 Drop 9 题，因此分数差距基本都体现在 Exam 上。如果数学证明不是特别强，请参加 Discussion 和 Office Hour，并尽早找学霸组队学习。

写题的时候最好用 LaTeX 写，方便 Grader 判分，相对来说更容易得分也更容易 Argue，也方便自己在有需要时更正。因为题目的解答通常会有大段的文字说明，手写一旦写错了反而会十分麻烦。",,"有 Quiz，但不占分，做与不做看个人兴趣，考试题型和 Quiz 完全不一样，也不会 Explicitly 考你是否做了 Quiz。","两次 Midterm。一般在晚上，考 2-3
 小时，做 5-7 个算法题。评分标准比较严，过程需要写仔细。考前复习资料有 Lab 和 Homework，好好复习课件，还有一到两份 Past Exam 和 Study Questions，很多题目。每个教授出题风格并不一样，有的爱考概念 (几十道判断对错怕不怕) 有的只考大题，所以有可能的话最好找自己教授的旧题看。

第一次 Midterm 考计算模型，这里定义很多，熟悉定义很重要。不容易得 0 分，但是细节挺多，容易失小分。第二次 Midterm 考算法，容易造成 All or nothing 的情况。题目难度的话，一般来说会比 Homework 跟 Lab 简单，因此，有时间多练练题就好，剩下就祈祷别脑抽吧。",,"准备参考 Midterm。Final 是 Cumulative，但给出的复习资料差不多。大部分 Weight 会放在算法与最后的 Problem Reduction (基本上也是算法)，第一部分考得很少，按照考纲熟悉概念就好。增加题感。",,,"5","1.5","2.67",NULL,"1","3.67",NULL,"2.67","没有。"
